CAREERFRAME LANDING PAGE - COMPLETE SOURCE CODE DOCUMENT
==========================================================

This is the complete source code for the CareerFrame AI-powered career development platform landing page. Every single line of code is included below.

LAST UPDATED: June 21, 2025
RECENT CHANGES:
- Updated testimonials with pre-launch appropriate feedback
- Changed "No Credit Card Required" to "Free, why wouldn't you try?"
- Updated Sarah Chen's profile image to East Asian woman
- All code organized from top to bottom as it appears on the website

==================================================
CONFIGURATION FILES
==================================================

--- package.json ---
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.4",
    "@radix-ui/react-alert-dialog": "^1.1.7",
    "@radix-ui/react-aspect-ratio": "^1.1.3",
    "@radix-ui/react-avatar": "^1.1.4",
    "@radix-ui/react-checkbox": "^1.1.5",
    "@radix-ui/react-collapsible": "^1.1.4",
    "@radix-ui/react-context-menu": "^2.2.7",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.7",
    "@radix-ui/react-hover-card": "^1.1.7",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-menubar": "^1.1.7",
    "@radix-ui/react-navigation-menu": "^1.2.6",
    "@radix-ui/react-popover": "^1.1.7",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-radio-group": "^1.2.4",
    "@radix-ui/react-scroll-area": "^1.2.4",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slider": "^1.2.4",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.1.4",
    "@radix-ui/react-tabs": "^1.1.4",
    "@radix-ui/react-toast": "^1.2.7",
    "@radix-ui/react-toggle": "^1.1.3",
    "@radix-ui/react-toggle-group": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.2.0",
    "@tanstack/react-query": "^5.60.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^3.6.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.6.0",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "next-themes": "^0.4.6",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.55.0",
    "react-icons": "^5.4.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "tw-animate-css": "^1.2.5",
    "vaul": "^1.1.2",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.24.2",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.2.7",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@tailwindcss/vite": "^4.1.3",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.4",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.14"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}

--- vite.config.ts ---
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import { cartographer } from "@replit/vite-plugin-cartographer";
import { runtimeErrorModal } from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    cartographer(),
    runtimeErrorModal(),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./client/src"),
      "@assets": path.resolve(__dirname, "./attached_assets"),
    },
  },
  root: "client",
  build: {
    outDir: "../dist/public",
    emptyOutDir: true,
  },
});

--- tailwind.config.ts ---
import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./client/src/**/*.{js,ts,jsx,tsx,mdx}",
    "./client/components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        navy: "hsl(217, 91%, 25%)",
        "fresh-green": "hsl(158, 76%, 60%)", 
        "soft-grey": "hsl(220, 9%, 46%)",
        "light-grey": "hsl(220, 14%, 96%)",
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;

--- postcss.config.js ---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./client/src/*"],
      "@assets/*": ["./attached_assets/*"]
    }
  },
  "include": ["client/src", "server"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

--- drizzle.config.ts ---
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  schema: "./shared/schema.ts",
  out: "./migrations",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
});

==================================================
FRONTEND APPLICATION ENTRY POINTS
==================================================

--- client/src/main.tsx ---
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);

--- client/src/App.tsx ---
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import Home from "@/pages/home";
import NotFound from "@/pages/not-found";

function Router() {
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Router />
      </TooltipProvider>
    </QueryClientProvider>
  );
}

export default App;

--- client/src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: 0 0% 100%;
  --foreground: 220 14% 4%;
  --muted: 220 14% 96%;
  --muted-foreground: 220 9% 46%;
  --popover: 0 0% 100%;
  --popover-foreground: 220 14% 4%;
  --card: 0 0% 100%;
  --card-foreground: 220 14% 4%;
  --border: 220 13% 91%;
  --input: 220 13% 91%;
  --primary: 217 91% 60%; /* Deep navy blue */
  --primary-foreground: 210 40% 98%;
  --secondary: 220 14% 96%;
  --secondary-foreground: 220 9% 10%;
  --accent: 220 14% 96%;
  --accent-foreground: 220 9% 10%;
  --destructive: 0 84% 60%;
  --destructive-foreground: 210 40% 98%;
  --ring: 217 91% 60%;
  --radius: 0.5rem;
  
  /* Custom CareerFrame colors */
  --navy: 217 91% 25%; /* #1E3A8A */
  --fresh-green: 158 76% 60%; /* #4ADEAA - matches CareerFrame logo */
  --soft-grey: 220 9% 46%; /* #6B7280 */
  --light-grey: 220 14% 96%; /* #F9FAFB */
}

/* Custom Cursor Styles */
body {
  cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><circle cx="10" cy="10" r="8" fill="%2388A98F" opacity="0.8"/></svg>') 10 10, auto;
}

/* Hover effects for interactive elements */
button,
a,
[role="button"],
input,
textarea,
select {
  cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="%2388A98F" opacity="0.9"/></svg>') 12 12, pointer !important;
}

.dark {
  --background: 220 14% 4%;
  --foreground: 210 40% 98%;
  --muted: 220 14% 14%;
  --muted-foreground: 220 9% 64%;
  --popover: 220 14% 4%;
  --popover-foreground: 210 40% 98%;
  --card: 220 14% 4%;
  --card-foreground: 210 40% 98%;
  --border: 220 14% 14%;
  --input: 220 14% 14%;
  --primary: 217 91% 60%;
  --primary-foreground: 220 14% 4%;
  --secondary: 220 14% 14%;
  --secondary-foreground: 210 40% 98%;
  --accent: 220 14% 14%;
  --accent-foreground: 210 40% 98%;
  --destructive: 0 62% 30%;
  --destructive-foreground: 210 40% 98%;
  --ring: 217 91% 60%;
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
  
  html {
    scroll-behavior: smooth;
    scroll-padding-top: 120px; /* Account for fixed navigation */
  }

  /* Page transition animations */
  .page-transition {
    animation: pageEnter 0.6s ease-out forwards;
  }

  .fade-in {
    animation: fadeIn 0.8s ease-out forwards;
  }

  .slide-up {
    animation: slideUp 0.6s ease-out forwards;
  }

  .slide-in-left {
    animation: slideInLeft 0.8s ease-out forwards;
  }

  .slide-in-right {
    animation: slideInRight 0.8s ease-out forwards;
  }

  .scale-in {
    animation: scaleIn 0.6s ease-out forwards;
  }

  .stagger-1 { animation-delay: 0.1s; }
  .stagger-2 { animation-delay: 0.2s; }
  .stagger-3 { animation-delay: 0.3s; }

  .card-hover {
    transition: all 0.3s ease;
  }

  .card-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .button-hover {
    transition: all 0.3s ease;
  }

  .button-hover:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .nav-scroll {
    transition: all 0.3s ease;
  }

  .gradient-green {
    background: linear-gradient(135deg, #4ADEAA 0%, #22c55e 100%);
  }

  @keyframes pageEnter {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
}

--- client/src/pages/not-found.tsx ---
import { Link } from "wouter";
import { Button } from "@/components/ui/button";

export default function NotFound() {
  return (
    <div className="min-h-screen bg-white flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-6xl font-bold text-navy mb-4">404</h1>
        <h2 className="text-2xl font-semibold text-soft-grey mb-4">Page Not Found</h2>
        <p className="text-lg text-soft-grey mb-8">
          The page you're looking for doesn't exist.
        </p>
        <Link href="/">
          <Button className="text-white px-8 py-3" style={{ backgroundColor: '#88A98F' }}>
            Return Home
          </Button>
        </Link>
      </div>
    </div>
  );
}

==================================================
MAIN HOME PAGE COMPONENT
==================================================

--- client/src/pages/home.tsx ---
import { useEffect, useState } from "react";
import { HeroSection } from "@/components/sections/hero";
import { WhatToExpectSection } from "@/components/sections/what-to-expect";
import { TrustSignalsSection } from "@/components/sections/trust-signals";
import { FeaturesSection } from "@/components/sections/features";
import { HowItWorksSection } from "@/components/sections/how-it-works";
import { FounderStorySection } from "@/components/sections/founder-story";
import { TestimonialsSection } from "@/components/sections/testimonials-new";
import { ProblemSolutionSection } from "@/components/sections/problem-solution";
import { PricingSection } from "@/components/sections/pricing";
import { UrgencyCTASection } from "@/components/sections/urgency-cta";
import { FAQSection } from "@/components/sections/faq";

import { NewsletterSection } from "@/components/sections/newsletter";
import { Footer } from "@/components/sections/footer";
import { LiveChat } from "@/components/ui/live-chat";
import { CustomCursor } from "@/components/ui/custom-cursor";
import { Button } from "@/components/ui/button";
import { useScrollReveal } from "@/hooks/use-scroll-animation";
import careerFrameLogo from "@assets/ChatGPT Image Jun 19, 2025, 09_12_42 PM_1750363966951.png";

function Navigation() {
  const [scrolled, setScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 20);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    <nav className={`fixed top-0 w-full z-50 nav-scroll ${
      scrolled 
        ? 'backdrop-blur-md shadow-lg border-b border-gray-800' 
        : 'backdrop-blur-sm border-b border-gray-800'
    }`} style={{ backgroundColor: 'rgba(10, 15, 20, 0.95)' }}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <div className="flex-shrink-0 flex items-center">
            <img 
              src={careerFrameLogo} 
              alt="CareerFrame Logo" 
              className="h-32"
            />
          </div>
          
          <div className="flex items-center space-x-8">
            <div className="hidden md:block">
              <div className="flex items-baseline space-x-8">
                <a href="#trust-signals" className="px-3 py-2 text-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg relative group" style={{ color: '#88A98F' }}>
                  <span className="relative z-10">Success Stories</span>
                  <div className="absolute inset-0 rounded-lg scale-0 group-hover:scale-100 transition-transform duration-300" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}></div>
                </a>
                <a href="#features" className="px-3 py-2 text-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg relative group" style={{ color: '#88A98F' }}>
                  <span className="relative z-10">Features</span>
                  <div className="absolute inset-0 rounded-lg scale-0 group-hover:scale-100 transition-transform duration-300" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}></div>
                </a>
                <a href="#how-it-works" className="px-3 py-2 text-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg relative group" style={{ color: '#88A98F' }}>
                  <span className="relative z-10">How it Works</span>
                  <div className="absolute inset-0 rounded-lg scale-0 group-hover:scale-100 transition-transform duration-300" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}></div>
                </a>
                <a href="#founder-story" className="px-3 py-2 text-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg relative group" style={{ color: '#88A98F' }}>
                  <span className="relative z-10">About</span>
                  <div className="absolute inset-0 rounded-lg scale-0 group-hover:scale-100 transition-transform duration-300" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}></div>
                </a>
                <a href="#pricing" className="px-3 py-2 text-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg relative group" style={{ color: '#88A98F' }}>
                  <span className="relative z-10">Pricing</span>
                  <div className="absolute inset-0 rounded-lg scale-0 group-hover:scale-100 transition-transform duration-300" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}></div>
                </a>
              </div>
            </div>
            
            <Button className="text-white px-6 py-2 font-semibold button-hover" style={{ backgroundColor: '#88A98F' }}>
              Sign In
            </Button>
          </div>
        </div>
      </div>
    </nav>
  );
}

export default function Home() {
  useScrollReveal();

  useEffect(() => {
    // Set page title and meta description
    document.title = "CareerFrame - AI-Powered Career Development Platform";
    
    // Create meta description if it doesn't exist
    let metaDescription = document.querySelector('meta[name="description"]');
    if (!metaDescription) {
      metaDescription = document.createElement('meta');
      metaDescription.setAttribute('name', 'description');
      document.head.appendChild(metaDescription);
    }
    metaDescription.setAttribute('content', 'Discover your perfect career path with CareerFrame\'s AI-powered guidance. Get personalized coaching, skill gap analysis, and milestone tracking to transform your career journey from confusion to confidence.');

    // Add Open Graph tags
    let ogTitle = document.querySelector('meta[property="og:title"]');
    if (!ogTitle) {
      ogTitle = document.createElement('meta');
      ogTitle.setAttribute('property', 'og:title');
      document.head.appendChild(ogTitle);
    }
    ogTitle.setAttribute('content', 'CareerFrame - AI-Powered Career Development Platform');

    let ogDescription = document.querySelector('meta[property="og:description"]');
    if (!ogDescription) {
      ogDescription = document.createElement('meta');
      ogDescription.setAttribute('property', 'og:description');
      document.head.appendChild(ogDescription);
    }
    ogDescription.setAttribute('content', 'Transform your career with AI-powered guidance, personalized coaching, and milestone-based progression. Join 50,000+ professionals who discovered their dream careers.');

    // Smooth scrolling for anchor links
    const handleSmoothScroll = (e: Event) => {
      const target = e.target as HTMLAnchorElement;
      if (target.tagName === 'A' && target.getAttribute('href')?.startsWith('#')) {
        e.preventDefault();
        const targetId = target.getAttribute('href')?.slice(1);
        const targetElement = document.getElementById(targetId || '');
        if (targetElement) {
          targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }
    };

    document.addEventListener('click', handleSmoothScroll);
    return () => document.removeEventListener('click', handleSmoothScroll);
  }, []);

  return (
    <div className="min-h-screen bg-white page-transition">
      <Navigation />
      <div className="fade-in">
        <HeroSection />
      </div>
      <div className="slide-up">
        <ProblemSolutionSection />
      </div>
      <div className="slide-up">
        <WhatToExpectSection />
      </div>
      <div className="slide-in-left">
        <FeaturesSection />
      </div>
      <div className="slide-in-left">
        <HowItWorksSection />
      </div>
      <div className="fade-in">
        <FounderStorySection />
      </div>
      <div className="slide-up">
        <TestimonialsSection />
      </div>
      <div className="slide-in-right">
        <PricingSection />
      </div>
      <div className="fade-in">
        <UrgencyCTASection />
      </div>
      <div className="scale-in">
        <FAQSection />
      </div>

      <div className="slide-up">
        <NewsletterSection />
      </div>
      <Footer />
      <LiveChat />
      <CustomCursor />
    </div>
  );
}

==================================================
LANDING PAGE SECTIONS (TOP TO BOTTOM)
==================================================

--- client/src/components/sections/hero.tsx ---
import { Button } from "@/components/ui/button";
import { Heart, ArrowRight } from "lucide-react";
import { motion } from "framer-motion";
import careerFrameApp from "@assets/image_1750364343735.png";

export function HeroSection() {
  return (
    <section className="pt-20 pb-20 overflow-hidden" style={{ backgroundColor: '#0A0F14' }}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Headline Section */}
        <motion.div 
          className="text-center mb-12"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <h1 className="text-4xl lg:text-6xl font-bold mb-4 leading-tight" style={{ color: '#88A98F' }}>
            Wake Up Excited for a Career That Fulfills You
          </h1>
        </motion.div>

        {/* Content Grid */}
        <div className="lg:grid lg:grid-cols-2 gap-12 items-start">
          <motion.div 
            className="text-center lg:text-left"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            <p className="text-lg mb-4 font-medium" style={{ color: '#88A98F' }}>
              CareerFrame is an AI-powered career development platform — not a job board
            </p>
            <p className="text-xl mb-8 leading-relaxed" style={{ color: '#88A98F' }}>
              Join early adopters shaping the future of personalised career growth — your transformation could start with just 15 minutes a day.
            </p>
            
            <div className="flex flex-col justify-center items-center lg:items-start gap-3 mb-8" style={{ color: '#88A98F' }}>
              <div className="flex items-center text-base">
                <span className="w-2 h-2 rounded-full mr-3" style={{ backgroundColor: '#88A98F' }}></span>
                We're targeting meaningful career progress, including salary growth, by aligning you to roles that match your potential
              </div>
              <div className="flex items-center text-base">
                <span className="w-2 h-2 rounded-full mr-3" style={{ backgroundColor: '#88A98F' }}></span>
                Our AI coach is built to fast-track your journey to a new career
              </div>
            </div>

            <div className="flex flex-col sm:flex-row justify-center lg:justify-start gap-4">
              <Button 
                size="lg" 
                className="text-white text-lg px-8 py-4 shadow-lg button-hover"
                style={{ backgroundColor: '#88A98F' }}
              >
                Start Your Career Plan — Free
              </Button>
            </div>
            <p className="text-sm mt-3 text-center lg:text-left" style={{ color: '#88A98F' }}>
              90-day satisfaction guarantee
            </p>
          </motion.div>

          {/* App Interface Image */}
          <motion.div 
            className="relative mt-8 lg:mt-0"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
          >
            <img 
              src={careerFrameApp} 
              alt="CareerFrame App Interface" 
              className="w-full h-auto rounded-lg shadow-2xl"
            />
          </motion.div>
        </div>
      </div>

    </section>
  );
}

--- client/src/components/sections/problem-solution.tsx ---
import { motion } from "framer-motion";

export function ProblemSolutionSection() {
  return (
    <section className="py-16 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div 
          className="bg-white rounded-2xl shadow-lg p-8 lg:p-12"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <div className="grid lg:grid-cols-3 gap-8 text-center">
            <div className="p-6">
              <div className="w-16 h-16 bg-red-100 text-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                😔
              </div>
              <h3 className="text-xl font-semibold text-navy mb-3">Feeling Stuck</h3>
              <p className="text-soft-grey">
                Feeling stuck in a job that doesn't excite you? Every day feels like you're not reaching your full potential, just going through the motions without fulfilment.
              </p>
            </div>
            
            <div className="p-6">
              <div className="w-16 h-16 bg-orange-100 text-orange-500 rounded-full flex items-center justify-center mx-auto mb-4">
                ⏰
              </div>
              <h3 className="text-xl font-semibold text-navy mb-3">Missing Opportunities</h3>
              <p className="text-soft-grey">
                The longer you stay in that job, the more you miss out on the opportunities that could change your life. The routine becomes draining, and the fear of stepping into something new only holds you back.
              </p>
            </div>

            <div className="p-6">
              <div className="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}>
                🚀
              </div>
              <h3 className="text-xl font-semibold text-navy mb-3">Break Free with CareerFrame</h3>
              <p className="text-soft-grey">
                CareerFrame helps you break free from career confusion. With personalized coaching, skill gap analysis, and tailored career paths, we provide the tools and guidance to help you pursue work that aligns with your goals.
              </p>
            </div>
          </div>
        </motion.div>
      </div>
    </section>
  );
}

--- client/src/components/sections/what-to-expect.tsx ---
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { CheckCircle, ArrowRight, Clock, Users, TrendingUp, Star, Award } from "lucide-react";

export function WhatToExpectSection() {
  const steps = [
    {
      step: "Step 1",
      title: "Meet Your AI Coach",
      description: "Complete a 5-minute assessment to help us understand your goals, skills, and career preferences."
    },
    {
      step: "Step 2", 
      title: "Get Your Personalized Plan",
      description: "Receive a custom 90-day roadmap with specific milestones, skill development goals, and target roles."
    },
    {
      step: "Step 3",
      title: "Begin Your Journey",
      description: "Start progressing through your milestones with daily guidance, weekly check-ins, and community support."
    }
  ];

  return (
    <section id="what-to-expect" className="py-16 relative overflow-hidden" style={{ backgroundColor: '#e6e8f5' }}>
      {/* Creative Background Pattern */}
      <div className="absolute inset-0 opacity-20">
        <svg className="w-full h-full" viewBox="0 0 400 400" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
              <path d="M 40 0 L 0 0 0 40" fill="none" stroke="#88A98F" strokeWidth="1" opacity="0.3"/>
            </pattern>
            <radialGradient id="gradient" cx="50%" cy="50%" r="50%">
              <stop offset="0%" stopColor="#88A98F" stopOpacity="0.1"/>
              <stop offset="100%" stopColor="#88A98F" stopOpacity="0"/>
            </radialGradient>
          </defs>
          <rect width="100%" height="100%" fill="url(#pattern)"/>
          <circle cx="100" cy="100" r="60" fill="url(#gradient)"/>
          <circle cx="300" cy="150" r="40" fill="url(#gradient)"/>
          <circle cx="350" cy="300" r="50" fill="url(#gradient)"/>
          <circle cx="50" cy="300" r="35" fill="url(#gradient)"/>
        </svg>
      </div>
      
      {/* Floating Elements */}
      <div className="absolute top-10 left-10 w-4 h-4 rounded-full opacity-40" style={{ backgroundColor: '#88A98F' }}></div>
      <div className="absolute top-20 right-20 w-6 h-6 rounded-full opacity-30" style={{ backgroundColor: '#88A98F' }}></div>
      <div className="absolute bottom-20 left-20 w-3 h-3 rounded-full opacity-50" style={{ backgroundColor: '#88A98F' }}></div>
      <div className="absolute bottom-10 right-10 w-5 h-5 rounded-full opacity-35" style={{ backgroundColor: '#88A98F' }}></div>
      
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="text-center mb-12">
          <h2 className="text-3xl lg:text-4xl font-bold text-navy mb-4">
            What to Expect After You{" "}
            <span className="text-3xl lg:text-4xl font-bold">
              Sign Up
            </span>
          </h2>
          <p className="text-xl text-soft-grey">
            Your career transformation starts immediately — here's exactly what happens next
          </p>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {steps.map((step, index) => (
            <div key={index} className="relative">
              <Card className="h-full shadow-lg hover:shadow-xl transition-shadow duration-300">
                <CardContent className="p-8">
                  <div className="flex items-center justify-center w-16 h-16 rounded-full mx-auto mb-6" style={{ backgroundColor: '#88A98F' }}>
                    <span className="text-white font-bold text-lg">{index + 1}</span>
                  </div>
                  
                  <div className="text-center mb-4">
                    <h3 className="text-xl font-bold text-navy mb-3">{step.title}</h3>
                  </div>
                  
                  <p className="text-soft-grey text-center leading-relaxed">
                    {step.description}
                  </p>
                </CardContent>
              </Card>
              
              {index < steps.length - 1 && (
                <div className="hidden lg:block absolute top-1/2 -right-4 transform -translate-y-1/2">
                  <ArrowRight className="h-8 w-8" style={{ color: '#88A98F' }} />
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="mt-12 grid md:grid-cols-2 lg:grid-cols-4 gap-8">
          <div className="text-center">
            <div className="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}>
              <Users className="h-8 w-8" style={{ color: '#88A98F' }} />
            </div>
            <div className="text-3xl font-bold text-navy mb-2">12,000+</div>
            <div className="text-lg font-semibold text-navy mb-1">Future Success Stories</div>
            <div className="text-sm text-soft-grey">CareerFrame was created to help people land the roles they deserve — and you're next.</div>
          </div>
          <div className="text-center">
            <div className="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}>
              <TrendingUp className="h-8 w-8" style={{ color: '#88A98F' }} />
            </div>
            <div className="text-3xl font-bold text-navy mb-2">72%</div>
            <div className="text-lg font-semibold text-navy mb-1">Reported Improved Career Confidence</div>
            <div className="text-sm text-soft-grey">After creating a personalised roadmap with CareerFrame</div>
          </div>
          <div className="text-center">
            <div className="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}>
              <Star className="h-8 w-8" style={{ color: '#88A98F' }} />
            </div>
            <div className="text-3xl font-bold text-navy mb-2">Rate Us</div>
            <div className="text-lg font-semibold text-navy mb-1">Be the first to rate us</div>
            <div className="text-sm text-soft-grey">Your voice matters</div>
          </div>
          <div className="text-center">
            <div className="w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4" style={{ backgroundColor: 'rgba(136, 169, 143, 0.1)' }}>
              <Award className="h-8 w-8" style={{ color: '#88A98F' }} />
            </div>
            <div className="text-3xl font-bold text-navy mb-2">90 Days</div>
            <div className="text-lg font-semibold text-navy mb-1">Our goal: career breakthroughs</div>
            <div className="text-sm text-soft-grey">CareerFrame is built for speed — helping you move fast with a clear, achievable plan.</div>
          </div>
        </div>
      </div>
    </section>
  );
}

--- client/src/components/sections/features.tsx ---
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useScrollAnimation } from "@/hooks/use-scroll-animation";
import { 
  Bot, 
  Search, 
  TrendingUp, 
  Target, 
  FileText, 
  Users, 
  Trophy,
  Goal,
  Route,
  ArrowRight,
  Play
} from "lucide-react";
import careerPathwaysImage from "@assets/Screenshot 2025-05-17 182855.png";
import xpRewardInterface from "@assets/XP & Reward Interface.png";
import careerChoiceImage from "@assets/East Asian Male Choosing Career.png";

const features = [
  {
    icon: Target,
    title: "Gain Clarity in Your Job Search",
    description: "Stop feeling overwhelmed by endless job listings. Get specific direction on which roles to target and how to position yourself as the ideal candidate.",
    image: "https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300",
    alt: "Professional gaining clarity on career direction",
    cta: "Get Clear Direction"
  },
  {
    icon: TrendingUp,
    title: "Overcome Self-Doubt",
    description: "Build unshakeable confidence in your abilities. Identify your unique strengths and learn how to articulate your value to employers.",
    image: "https://images.unsplash.com/photo-1552664730-d307ca884978?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300",
    alt: "Professional building confidence and overcoming doubt",
    cta: "Build Confidence"
  },
  {
    icon: Trophy,
    title: "Discover Roles That Align With You",
    description: "Move beyond settling for 'good enough' jobs. Explore opportunities that align with your values and ambitions through our matching system.",
    image: careerChoiceImage,
    alt: "Professional exploring career opportunities",
    cta: "Explore Opportunities"
  },
  {
    icon: Search,
    title: "Career Alignment & Role Insights",
    description: "Get in-depth role overviews and personalized recommendations based on your skills, experience, and career aspirations.",
    image: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300",
    alt: "Data analysis and career insights dashboard",
    cta: "Get Role Insights"
  },

];

const additionalFeatures = [
  {
    icon: Users,
    title: "Connect with Like-Minded Professionals",
    description: "Join a supportive community of career-changers. Share experiences, celebrate wins, and get encouragement when you need it most.",
    color: "bg-green-100 text-green-500"
  },
  {
    icon: Goal,
    title: "Career Alignment & Role Insights",
    description: "Get in-depth role overviews and personalized recommendations based on your skills, experience, and career aspirations.",
    color: "bg-cyan-100 text-cyan-500"
  },
  {
    icon: Search,
    title: "Explore Roles Access (Freemium/Premium)",
    description: "Get limited or unlimited access to job fit, salaries, and perks.",
    color: "bg-blue-100 text-blue-500"
  },
  {
    icon: TrendingUp,
    title: "Deep Skill Gap Analysis (Premium)",
    description: "Receive a detailed skill gap report to understand areas needing improvement for career advancement.",
    color: "bg-green-100 text-green-500"
  },
  {
    icon: Target,
    title: "Milestone Tracker (Freemium/Premium)",
    description: "Track and celebrate progress with personalized goals and visible milestones.",
    color: "bg-purple-100 text-purple-500"
  },
  {
    icon: FileText,
    title: "AI-Powered Resume Builder",
    description: "Generate a professional, optimized resume tailored to your goals.",
    color: "bg-pink-100 text-pink-500"
  },
  {
    icon: FileText,
    title: "AI-Generated Cover Letter",
    description: "Automatically generate a personalized cover letter for the role you want.",
    color: "bg-indigo-100 text-indigo-500"
  },
  {
    icon: Trophy,
    title: "XP Points & Rewards (2x Premium)",
    description: "Earn XP for milestones and unlock rewards to accelerate your career journey.",
    color: "bg-yellow-100 text-yellow-500"
  }
];

const valueProps = [
  {
    icon: Bot,
    title: "Personalized Career Coaching",
    description: "Get expert guidance every step of the way. Our AI-powered coach builds a relationship with you, offering tailored advice and strategies that align with your unique strengths and career goals.",
    color: "bg-fresh-green text-white"
  },
  {
    icon: TrendingUp,
    title: "Skill Gap Analysis & Growth",
    description: "Discover exactly where you stand. CareerFrame identifies the gaps between your current skills and the ones required for your dream role, giving you a clear path to grow and advance.",
    color: "bg-navy text-white"
  },
  {
    icon: Route,
    title: "Tailored Career Pathways",
    description: "No one-size-fits-all approach. CareerFrame creates a bespoke roadmap for your career, matching you with the right opportunities and learning resources to unlock your potential.",
    color: "bg-purple-500 text-white"
  }
];

export function FeaturesSection() {
  const { ref: valuePropRef, isVisible: valuePropVisible } = useScrollAnimation();
  const { ref: featuresRef, isVisible: featuresVisible } = useScrollAnimation();
  const { ref: additionalRef, isVisible: additionalVisible } = useScrollAnimation();

  return (
    <>
      {/* Value Proposition */}
      <section className="py-16 bg-gradient-to-r from-emerald-400 to-teal-500">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <div 
            ref={valuePropRef}
            className={`transition-all duration-700 ${valuePropVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-white mb-6 drop-shadow-lg">
              What You Get: A Complete Career Development System
            </h2>
            <p className="text-xl text-white max-w-3xl mx-auto mb-12 drop-shadow-md">
              Everything you need to advance your career journey - personalized guidance, proven tools, and expert support.
            </p>
          </div>
          <div className="grid md:grid-cols-3 gap-8">
            {valueProps.map((prop, index) => (
              <div 
                key={index}
                className={`text-center transition-all duration-700 card-hover stagger-${index + 1} ${
                  valuePropVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
                }`}
              >
                <div className={`w-16 h-16 ${prop.color} rounded-full flex items-center justify-center mx-auto mb-4`}>
                  <prop.icon className="h-8 w-8" />
                </div>
                <h3 className="text-xl font-semibold text-navy mb-3">{prop.title}</h3>
                <p className="text-black font-bold">{prop.description}</p>
              </div>
            ))}
          </div>

          {/* Interactive Demo Section */}
          <div className={`mt-16 text-center transition-all duration-700 ${
            valuePropVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}>
            <div className="bg-white rounded-lg shadow-lg p-8 max-w-2xl mx-auto">
              <h3 className="text-2xl font-bold text-navy mb-4">
                See CareerFrame in Action
              </h3>
              <p className="text-soft-grey mb-6">
                Take a 2-minute interactive tour and discover how we'll transform your career journey.
              </p>
              <Button 
                className="text-white px-8 py-3 text-lg font-semibold inline-flex items-center gap-2"
                style={{ backgroundColor: '#88A98F' }}
              >
                <Play className="h-5 w-5" />
                Start Interactive Demo
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Main Features */}
      <section id="features" className="py-20 bg-light-grey">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div 
            ref={featuresRef}
            className={`text-center mb-16 transition-all duration-700 ${
              featuresVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-navy mb-6">
              Powerful Features to Accelerate Your Career
            </h2>
            <p className="text-xl text-soft-grey max-w-3xl mx-auto">
              Every tool you need to discover, prepare for, and land your dream career - all powered by intelligent AI guidance.
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-12 mb-16">
            {features.map((feature, index) => (
              <Card 
                key={index}
                className={`bg-white shadow-lg card-hover transition-all duration-500 delay-${index * 100} ${
                  featuresVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
                }`}
              >
                <CardContent className="p-8">
                  <div className="flex items-start mb-6">
                    <div className="w-12 h-12 bg-fresh-green/10 rounded-lg flex items-center justify-center mr-4">
                      <feature.icon className="h-6 w-6 text-fresh-green" />
                    </div>
                    <div>
                      <h3 className="text-2xl font-bold text-navy mb-2">{feature.title}</h3>
                      <p className="text-soft-grey">{feature.description}</p>
                    </div>
                  </div>
                  <img 
                    src={feature.image}
                    alt={feature.alt}
                    className="rounded-lg w-full h-48 object-cover object-top mb-4" 
                  />
                  <Button variant="link" className="text-fresh-green p-0 h-auto font-semibold">
                    {feature.cta} <ArrowRight className="ml-1 h-4 w-4" />
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Additional Features Grid */}
          <div 
            ref={additionalRef}
            className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"
          >
            {additionalFeatures.map((feature, index) => (
              <Card 
                key={index}
                className={`bg-white shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all duration-500 delay-${index * 50} ${
                  additionalVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
                }`}
              >
                <CardContent className="p-5">
                  <div className={`w-10 h-10 ${feature.color} rounded-lg flex items-center justify-center mb-3`}>
                    <feature.icon className="h-5 w-5" />
                  </div>
                  <h4 className="text-base font-semibold text-navy mb-2">{feature.title}</h4>
                  <p className="text-sm text-soft-grey">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* XP & Rewards Highlight */}
          <div className="mt-16">
            <Card className="gradient-green text-white overflow-hidden">
              <CardContent className="p-8 lg:p-12">
                <div className="grid lg:grid-cols-2 gap-8 items-center">
                  <div>
                    <h3 className="text-3xl font-bold mb-4">🏆 Earn XP & Unlock Rewards</h3>
                    <p className="text-green-50 text-lg mb-6">
                      Complete tasks like CV building, skill upgrades, or community engagement to earn XP. Exchange points for discounts with partner brands or unlock premium features.
                    </p>
                    <div className="flex items-center space-x-6">
                      <div className="text-center">
                        <div className="text-2xl font-bold">Build</div>
                        <div className="text-green-200 text-sm">Your Skills</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold">Earn</div>
                        <div className="text-green-200 text-sm">XP Points</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold">Unlock</div>
                        <div className="text-green-200 text-sm">Rewards</div>
                      </div>
                    </div>
                  </div>
                  <div className="text-center">
                    <img 
                      src={xpRewardInterface}
                      alt="CareerFrame XP and Rewards Interface showing team leaderboards and milestone tracking" 
                      className="rounded-xl mx-auto max-w-full h-auto" 
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>


        </div>
      </section>
    </>
  );
}

--- client/src/components/sections/how-it-works.tsx ---
export function HowItWorksSection() {
  return null;
}

--- client/src/components/sections/founder-story.tsx ---
import { Card, CardContent } from "@/components/ui/card";
import { Quote } from "lucide-react";

export function FounderStorySection() {
  return (
    <section id="founder-story" className="py-16 bg-gradient-to-r from-blue-50 to-indigo-50">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <Card className="bg-white shadow-xl">
          <CardContent className="p-8 lg:p-12">
            <div className="text-center mb-8">
              <Quote className="h-12 w-12 text-fresh-green mx-auto mb-4" />
              <h2 className="text-3xl font-bold text-navy mb-4">
                Why I Created CareerFrame
              </h2>
            </div>
            
            <div className="flex flex-col lg:flex-row items-center gap-8">
              <div className="lg:w-1/3">
                <div className="w-48 h-48 mx-auto rounded-full bg-gradient-to-br from-fresh-green to-navy/20 p-1">
                  <div className="w-full h-full rounded-full bg-soft-grey/20 flex items-center justify-center">
                    <span className="text-4xl font-bold text-navy">CF</span>
                  </div>
                </div>
                <div className="text-center mt-4">
                  <h3 className="text-xl font-semibold text-navy">Arron McWilliam</h3>
                  <p className="text-soft-grey">Founder & CEO</p>
                </div>
              </div>
              
              <div className="lg:w-2/3">
                <blockquote className="text-lg text-soft-grey leading-relaxed">
                  <p className="mb-4">
                    "When I left the military in 2011, I found myself completely lost in the civilian job market. I had the discipline, the work ethic, the drive — but none of that seemed to matter. Job applications went unanswered. Roles I knew I could thrive in were out of reach because my CV didn't say the right things. I wasn't even getting feedback to know where I was going wrong. It was exhausting and demoralising."
                  </p>
                  <p className="mb-4">
                    "Thanks to a friend, I eventually landed a job in the gas industry and worked relentlessly to build a stable future — but that feeling of being overlooked and undervalued never really left me. At times, it felt like I had to prove I was applying for jobs just to reassure my partner, because the silence from employers made it look like I wasn't trying."
                  </p>
                  <p className="mb-4">
                    "That experience stayed with me. It lit a fire. I wanted to build something that gave people like me the guidance, clarity, and confidence I didn't have back then — without the £200-an-hour coaching fees or the irrelevant advice of generic career platforms."
                  </p>
                  <p className="font-semibold text-navy">
                    "That's why I created CareerFrame — a place where you're recognised for your true potential, not just what's written on your CV. It's the platform I wish I had when I was starting over. And now, I'm here to help others find direction, regain confidence, and take control of their future."
                  </p>
                </blockquote>
              </div>
            </div>
            

          </CardContent>
        </Card>
      </div>
    </section>
  );
}

--- client/src/components/sections/testimonials-new.tsx ---
import { Card, CardContent } from "@/components/ui/card";
import { useScrollAnimation } from "@/hooks/use-scroll-animation";
import { Star, Quote } from "lucide-react";

// Pre-launch testimonials from early adopters and beta testers
const testimonials = [
  {
    rating: 5,
    quote: "The process and milestone tracker has really given me something proud to work towards. Finally, a clear path instead of endless job searching with no direction.",
    name: "Sarah Chen",
    role: "Early Adopter",
    image: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80&q=80"
  },
  {
    rating: 5,
    quote: "CareerFrame has actually given me direction, I was lost before. The platform helped me see a clear roadmap when I had no idea what my next career move should be.",
    name: "Marcus Johnson", 
    role: "Beta Tester",
    image: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80"
  },
  {
    rating: 5,
    quote: "Due to AI I was made redundant, I genuinely had to start over again. This platform helped me understand how my skills could be reapplied in a job that will be more protected from AI.",
    name: "Emily Rodriguez",
    role: "Career Transitioner", 
    image: "https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80"
  }
];

export function TestimonialsSection() {
  const { ref, isVisible } = useScrollAnimation();

  return (
    <section id="testimonials" className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div 
          ref={ref}
          className={`text-center mb-16 transition-all duration-700 ${
            isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <h2 className="text-3xl lg:text-4xl font-bold text-navy mb-6">
            Real Stories — Coming Soon
          </h2>
          <p className="text-xl text-soft-grey max-w-3xl mx-auto">
            Here's what our early adopters and beta testers are saying about their experience with CareerFrame so far.
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {testimonials.map((testimonial, index) => (
            <Card 
              key={index}
              className={`bg-light-grey shadow-lg hover:shadow-xl transition-all duration-700 delay-${index * 100} relative ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
              }`}
            >
              <CardContent className="p-8">
                <div className="absolute top-4 right-4 text-fresh-green/20">
                  <Quote className="h-12 w-12" />
                </div>
                <div className="flex mb-4">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <Star key={i} className="h-5 w-5 text-yellow-400 fill-current" />
                  ))}
                </div>
                <p className="text-soft-grey mb-6 italic relative z-10">"{testimonial.quote}"</p>
                <div className="flex items-center">
                  <img 
                    src={testimonial.image}
                    alt={`${testimonial.name} testimonial`}
                    className="w-12 h-12 rounded-full object-cover mr-4" 
                  />
                  <div>
                    <div className="font-semibold text-navy">{testimonial.name}</div>
                    <div className="text-sm text-soft-grey">{testimonial.role}</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>



      </div>
    </section>
  );
}

--- client/src/components/sections/pricing.tsx ---
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { useScrollAnimation } from "@/hooks/use-scroll-animation";
import { Check, X, ChevronDown } from "lucide-react";
import { useState } from "react";

const comparisonFeatures = [
  { feature: "Career Assessment", free: "Basic (1 time)", premium: "Advanced + Unlimited Retakes" },
  { feature: "AI Career Coaching", free: "3 sessions/month", premium: "Unlimited sessions" },
  { feature: "Role Recommendations", free: "3 roles", premium: "Unlimited personalized matches" },
  { feature: "Skill Gap Analysis", free: "Basic overview", premium: "Deep analysis + learning roadmap" },
  { feature: "CV Generation", free: "1 per month", premium: "Unlimited + ATS optimization" },
  { feature: "Cover Letters", free: "1 per month", premium: "Unlimited + role-specific" },
  { feature: "Career Pathways", free: "✗", premium: "Custom 90-day roadmaps" },
  { feature: "Milestone Tracking", free: "✗", premium: "Weekly progress reviews" },
  { feature: "Priority Support", free: "✗", premium: "Direct coach access" },
  { feature: "Community Access", free: "Basic forums", premium: "Industry-specific groups" },
  { feature: "XP Rewards", free: "Standard rate", premium: "2x multiplier + bonuses" }
];

const plans = [
  {
    name: "Free Plan",
    price: 0,
    currency: "£",
    description: "Perfect for exploring career options and getting started",
    features: [
      "Basic career assessment",
      "3 AI coaching sessions per month",
      "3 role recommendations",
      "1 CV generation per month",
      "1 cover letter per month",
      "Community forum access",
      "Basic XP rewards"
    ],
    limitations: [
      "Limited coaching sessions",
      "No custom career pathways",
      "Basic skill analysis only"
    ],
    cta: "Start Your Career Plan — Free",
    popular: false
  },
  {
    name: "Premium Plan", 
    price: 29,
    currency: "£",
    description: "Includes unlimited AI coaching, tailored milestone plans, and recruiter visibility",
    features: [
      "Everything in Free Plan, plus:",
      "Unlimited AI coaching sessions",
      "Custom 90-day career roadmaps", 
      "Deep skill gap analysis + learning paths",
      "Unlimited CV & cover letter generation",
      "ATS-optimized documents",
      "Weekly milestone reviews",
      "Industry-specific networking groups",
      "Priority support from career coaches",
      "2x XP multiplier + bonus rewards",
      "Recruiter visibility boost"
    ],
    valueProps: [
      "90-day satisfaction guarantee"
    ],
    cta: "Accelerate Your Career",
    popular: true
  }
];

export function PricingSection() {
  const { ref, isVisible } = useScrollAnimation();
  const [isComparisonOpen, setIsComparisonOpen] = useState(false);

  return (
    <section id="pricing" className="py-12 bg-gradient-to-br from-yellow-400 via-orange-500 to-red-500">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div 
          ref={ref}
          className={`text-center mb-16 transition-all duration-700 ${
            isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <h2 className="text-3xl lg:text-4xl font-bold text-white mb-6 drop-shadow-lg">
            Simple Pricing. Powerful Results.
          </h2>
          <p className="text-xl text-white max-w-3xl mx-auto drop-shadow-md">
            Most users see a 5x return on investment within 6 months.<br />
            Start free — upgrade only when you see the value. 90-day satisfaction guarantee.
          </p>
        </div>

        <div className="grid lg:grid-cols-2 gap-8 max-w-4xl mx-auto">
          {plans.map((plan, index) => (
            <Card 
              key={index}
              className={`relative transition-all duration-700 delay-${index * 100} ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
              } ${plan.popular ? 'gradient-green text-white border-2 border-fresh-green' : 'bg-white border-2 border-gray-200'}`}
            >
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <Badge className="bg-white text-fresh-green px-4 py-2 font-semibold">
                    Most Popular
                  </Badge>
                </div>
              )}
              
              <CardContent className="p-8">
                <div className="text-center mb-8">
                  <h3 className={`text-2xl font-bold mb-2 ${plan.popular ? 'text-white' : 'text-navy'}`}>
                    {plan.name}
                  </h3>
                  <div className={`text-4xl font-bold mb-4 ${plan.popular ? 'text-white' : 'text-navy'}`}>
                    £{plan.price}
                    <span className={`text-lg font-normal ${plan.popular ? 'opacity-80' : 'text-soft-grey'}`}>
                      /month
                    </span>
                  </div>
                  <p className={plan.popular ? 'opacity-90' : 'text-soft-grey'}>
                    {plan.description}
                  </p>
                </div>
                
                <ul className="space-y-3 mb-8">
                  {plan.features.map((feature, i) => (
                    <li key={i} className="flex items-center">
                      <Check className={`mr-3 h-5 w-5 ${plan.popular ? 'text-white' : 'text-fresh-green'}`} />
                      <span className={
                        feature === "Everything in Free Plan, plus:" 
                          ? 'text-yellow-400 font-semibold' 
                          : plan.popular ? 'text-white' : 'text-navy'
                      }>
                        {feature}
                      </span>
                    </li>
                  ))}
                </ul>

                {plan.limitations && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-soft-grey mb-3">Limitations:</h4>
                    <ul className="space-y-2">
                      {plan.limitations.map((limitation, i) => (
                        <li key={i} className="flex items-center text-sm">
                          <X className="mr-2 h-4 w-4 text-gray-400" />
                          <span className="text-gray-500">{limitation}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {plan.valueProps && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-white mb-3">Value:</h4>
                    <ul className="space-y-2">
                      {plan.valueProps.map((prop, i) => (
                        <li key={i} className="flex items-center text-sm">
                          <Check className="mr-2 h-4 w-4 text-yellow-400" />
                          <span className="text-white/90">{prop}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
                
                <Button 
                  className={`w-full py-3 font-semibold button-hover ${
                    plan.popular 
                      ? 'bg-white hover:bg-gray-100' 
                      : 'border-2 text-white hover:text-black'
                  }`}
                  style={plan.popular 
                    ? { color: '#88A98F' }
                    : { borderColor: '#88A98F', backgroundColor: '#88A98F' }
                  }
                  variant={plan.popular ? "default" : "outline"}
                >
                  {plan.cta}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Detailed Comparison Table - Collapsible */}
        <div className={`mt-16 transition-all duration-700 delay-400 ${
          isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
        }`}>
          <Card className="bg-white shadow-xl">
            <CardContent className="p-8">
              <Collapsible open={isComparisonOpen} onOpenChange={setIsComparisonOpen}>
                <CollapsibleTrigger asChild>
                  <Button 
                    variant="ghost" 
                    className="w-full flex items-center justify-between p-0 h-auto hover:bg-transparent"
                  >
                    <h3 className="text-2xl font-bold text-navy">
                      Feature Comparison
                    </h3>
                    <ChevronDown 
                      className={`h-6 w-6 text-navy transition-transform duration-200 ${
                        isComparisonOpen ? 'rotate-180' : ''
                      }`}
                    />
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="mt-8">
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b-2 border-gray-200">
                          <th className="text-left py-4 px-4 font-semibold text-navy">Feature</th>
                          <th className="text-center py-4 px-4 font-semibold text-navy">Free Plan</th>
                          <th className="text-center py-4 px-4 font-semibold text-fresh-green">Premium Plan</th>
                        </tr>
                      </thead>
                      <tbody>
                        {comparisonFeatures.map((item, index) => (
                          <tr key={index} className="border-b border-gray-100">
                            <td className="py-4 px-4 font-medium text-navy">{item.feature}</td>
                            <td className="py-4 px-4 text-center text-soft-grey">
                              {item.free === "✗" ? (
                                <X className="h-5 w-5 text-red-500 mx-auto" />
                              ) : (
                                item.free
                              )}
                            </td>
                            <td className="py-4 px-4 text-center text-fresh-green font-medium">
                              {item.premium}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </CollapsibleContent>
              </Collapsible>
            </CardContent>
          </Card>
        </div>




      </div>
    </section>
  );
}

--- client/src/components/sections/urgency-cta.tsx ---
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Clock, Users, TrendingUp } from "lucide-react";
import { useEffect, useState } from "react";

export function UrgencyCTASection() {
  const [timeLeft, setTimeLeft] = useState({
    hours: 47,
    minutes: 23,
    seconds: 45
  });

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev.seconds > 0) {
          return { ...prev, seconds: prev.seconds - 1 };
        } else if (prev.minutes > 0) {
          return { ...prev, minutes: prev.minutes - 1, seconds: 59 };
        } else if (prev.hours > 0) {
          return { hours: prev.hours - 1, minutes: 59, seconds: 59 };
        }
        return prev;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  return (
    <section className="py-16 bg-gradient-to-r from-navy to-navy/90">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <Card className="bg-white shadow-2xl">
          <CardContent className="p-8 lg:p-12">
            <div className="flex items-center justify-center gap-2 text-red-600 mb-6">
              <Clock className="h-6 w-6" />
              <span className="text-lg font-semibold">Limited Time Offer</span>
            </div>
            
            <h2 className="text-3xl lg:text-4xl font-bold text-navy mb-6">
              Join the Next Career Transformation Cohort
            </h2>
            
            <p className="text-xl text-soft-grey mb-8">
              We only accept 100 new members per month to ensure personalized attention. 
              Current cohort closes in:
            </p>

            {/* Countdown Timer */}
            <div className="flex justify-center gap-4 mb-8">
              <div className="text-white px-4 py-3 rounded-lg" style={{ backgroundColor: '#88A98F' }}>
                <div className="text-2xl font-bold">{timeLeft.hours}</div>
                <div className="text-sm">Hours</div>
              </div>
              <div className="text-white px-4 py-3 rounded-lg" style={{ backgroundColor: '#88A98F' }}>
                <div className="text-2xl font-bold">{timeLeft.minutes}</div>
                <div className="text-sm">Minutes</div>
              </div>
              <div className="text-white px-4 py-3 rounded-lg" style={{ backgroundColor: '#88A98F' }}>
                <div className="text-2xl font-bold">{timeLeft.seconds}</div>
                <div className="text-sm">Seconds</div>
              </div>
            </div>

            <div className="grid md:grid-cols-3 gap-6 mb-8">
              <div className="text-center">
                <Users className="h-8 w-8 mx-auto mb-2" style={{ color: '#88A98F' }} />
                <div className="text-2xl font-bold text-navy">73</div>
                <div className="text-sm text-soft-grey">Spots Remaining</div>
              </div>
              <div className="text-center">
                <TrendingUp className="h-8 w-8 mx-auto mb-2" style={{ color: '#88A98F' }} />
                <div className="text-2xl font-bold text-navy">72%</div>
                <div className="text-sm text-soft-grey">Reported Improved Career Confidence</div>
              </div>
              <div className="text-center">
                <Clock className="h-8 w-8 mx-auto mb-2" style={{ color: '#88A98F' }} />
                <div className="text-2xl font-bold text-navy">90-Day</div>
                <div className="text-sm text-soft-grey">Satisfaction Guarantee</div>
              </div>
            </div>

            <Button 
              size="lg"
              className="text-white text-xl px-12 py-6 mb-4"
              style={{ backgroundColor: '#88A98F' }}
            >
              Secure Your Spot Now
            </Button>
            
            <p className="text-sm text-soft-grey">
              Next cohort starts in {Math.ceil((timeLeft.hours + timeLeft.minutes/60 + timeLeft.seconds/3600) / 24)} days • Free, why wouldn't you try? • 90-day money-back guarantee
            </p>
          </CardContent>
        </Card>
      </div>
    </section>
  );
}

--- client/src/components/sections/faq.tsx ---
import { Card, CardContent } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { useScrollAnimation } from "@/hooks/use-scroll-animation";
import { Play, ChevronDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState } from "react";

const faqs = [
  {
    question: "Is this just another online course or coaching program?",
    answer: "No. CareerFrame is a complete career transformation system that combines AI analysis, personalized coaching, and actionable roadmaps. You get specific next steps, not generic advice. 92% of our users land new roles within 90 days."
  },
  {
    question: "What if I don't see results in 90 days?",
    answer: "We offer a 90-day career transformation guarantee. If you don't land a new role or see significant career progress within 90 days, we'll refund your investment and provide an additional 90 days of coaching absolutely free."
  },
  {
    question: "How much time do I need to invest weekly?",
    answer: "Most successful users spend 3-5 hours per week on their career transformation. Our system is designed for busy professionals - you can make progress in 30-minute focused sessions during lunch breaks or evenings."
  },
  {
    question: "What credentials do your career coaches have?",
    answer: "Our coaches are certified career strategists with 10+ years of experience in recruitment, HR leadership, and career development. They've personally helped 500+ professionals transition to higher-paying, more fulfilling roles."
  },
  {
    question: "How does the AI actually work?",
    answer: "Our AI analyzes 50+ data points including your skills, experience, market demand, salary trends, and career preferences. It creates a personalized roadmap showing exactly which skills to develop, companies to target, and steps to take each week."
  },
  {
    question: "Can you guarantee career outcomes?",
    answer: "We can't guarantee specific career outcomes like job placement or salary increases, as these depend on many external factors. However, we provide proven tools, personalized guidance, and skill development that our users report finding valuable. Our 90-day satisfaction guarantee ensures you're happy with the platform itself."
  }
];

export function FAQSection() {
  const { ref, isVisible } = useScrollAnimation();
  const [isFAQOpen, setIsFAQOpen] = useState(false);

  return (
    <section className="py-20 bg-light-grey">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div 
          ref={ref}
          className={`transition-all duration-700 ${
            isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <Collapsible open={isFAQOpen} onOpenChange={setIsFAQOpen}>
            <CollapsibleTrigger className="w-full text-center mb-8">
              <div className="flex items-center justify-center gap-3 cursor-pointer hover:opacity-80 transition-opacity">
                <h2 className="text-3xl lg:text-4xl font-bold text-navy">
                  Your Questions Answered
                </h2>
                <ChevronDown className={`h-8 w-8 text-navy transition-transform duration-300 ${isFAQOpen ? 'rotate-180' : ''}`} />
              </div>
              <p className="text-xl text-soft-grey mt-4">
                Honest answers to the questions holding you back from taking action
              </p>
            </CollapsibleTrigger>
            
            <CollapsibleContent className={`transition-all duration-700 delay-200 ${
              isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}>
              <Card className="bg-white shadow-lg mt-8">
                <CardContent className="p-8">
                  <Accordion type="single" collapsible className="space-y-4">
                    {faqs.map((faq, index) => (
                      <AccordionItem key={index} value={`item-${index}`} className="border-b border-gray-200">
                        <AccordionTrigger className="text-left text-lg font-semibold text-navy hover:text-fresh-green transition-colors">
                          {faq.question}
                        </AccordionTrigger>
                        <AccordionContent className="text-soft-grey pt-4">
                          {faq.answer}
                        </AccordionContent>
                      </AccordionItem>
                    ))}
                  </Accordion>
                </CardContent>
              </Card>
            </CollapsibleContent>
          </Collapsible>
        </div>


      </div>
    </section>
  );
}

--- client/src/components/sections/newsletter.tsx ---
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { useScrollAnimation } from "@/hooks/use-scroll-animation";
import { Lock, Mail, Rocket, Calendar } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export function NewsletterSection() {
  const [email, setEmail] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { ref, isVisible } = useScrollAnimation();
  const { toast } = useToast();

  const handleSubscribe = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!email) return;

    setIsSubmitting(true);
    
    try {
      const response = await fetch('/api/newsletter/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      if (!response.ok) {
        throw new Error('Failed to subscribe');
      }

      toast({
        title: "Successfully subscribed!",
        description: "You'll receive weekly career insights and tips.",
      });
      
      setEmail("");
    } catch (error) {
      toast({
        title: "Subscription failed",
        description: "Please try again later.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>

      {/* Newsletter & Final CTA */}
      <section className="py-20 bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div 
            ref={ref}
            className="text-center mb-12"
          >
            <h2 className="text-3xl lg:text-4xl font-bold mb-6">
              Your Future Starts Now — Take the First Step Toward a Career You Love
            </h2>
            <Button 
              size="lg" 
              className="bg-fresh-green hover:bg-green-600 text-white px-12 py-6 text-xl font-semibold button-hover"
            >
              <Rocket className="mr-3 h-6 w-6" />
              Join For FREE
            </Button>
            <p className="text-sm text-blue-200 mt-4">Start your career transformation today • Free, why wouldn't you try?</p>
          </div>
          

        </div>
      </section>
    </>
  );
}

--- client/src/components/sections/footer.tsx ---
import { Twitter, Linkedin, Facebook } from "lucide-react";
import careerFrameLogo from "@assets/ChatGPT Image Jun 19, 2025, 09_12_42 PM_1750363966951.png";

const footerSections = [
  {
    title: "Platform",
    links: [
      { text: "Features", href: "#features" },
      { text: "How it Works", href: "#how-it-works" },
      { text: "Pricing", href: "#pricing" },
      { text: "Success Stories", href: "#testimonials" }
    ]
  },
  {
    title: "Resources",
    links: [
      { text: "Career Blog", href: "#" },
      { text: "Help Center", href: "#" },
      { text: "Community", href: "#" },
      { text: "API Docs", href: "#" }
    ]
  },
  {
    title: "Company",
    links: [
      { text: "About Us", href: "#" },
      { text: "Contact", href: "#" },
      { text: "Privacy Policy", href: "#" },
      { text: "Terms of Service", href: "#" }
    ]
  }
];

export function Footer() {
  return (
    <footer className="bg-gray-900 text-white py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid md:grid-cols-4 gap-8">
          <div>
            <div className="flex items-center mb-4">
              <img 
                src={careerFrameLogo} 
                alt="CareerFrame Logo" 
                className="h-32"
              />
            </div>
            <p className="text-gray-300 text-sm mb-4">
              Empowering careers through AI-powered guidance and personalized coaching.
            </p>
            <div className="flex space-x-4">
              <Twitter className="text-gray-400 hover:text-white cursor-pointer transition-colors" />
              <Linkedin className="text-gray-400 hover:text-white cursor-pointer transition-colors" />
              <Facebook className="text-gray-400 hover:text-white cursor-pointer transition-colors" />
            </div>
          </div>
          
          {footerSections.map((section, index) => (
            <div key={index}>
              <h4 className="font-semibold mb-4">{section.title}</h4>
              <ul className="space-y-2 text-sm text-gray-300">
                {section.links.map((link, linkIndex) => (
                  <li key={linkIndex}>
                    <a href={link.href} className="hover:text-white transition-colors">
                      {link.text}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        
        <div className="border-t border-gray-700 mt-8 pt-8 text-center text-sm text-gray-400">
          <p>&copy; 2024 CareerFrame. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}

==================================================
UI COMPONENTS AND UTILITIES
==================================================

--- client/src/components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

--- client/src/components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

--- client/src/components/ui/live-chat.tsx ---
import { MessageCircle } from "lucide-react";
import { Button } from "@/components/ui/button";

export function LiveChat() {
  const handleChatClick = () => {
    // In a real implementation, this would open your chat service
    alert('Chat widget would open here - connect to your preferred chat service (Intercom, Zendesk, etc.)');
  };

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Button
        onClick={handleChatClick}
        size="lg"
        className="bg-fresh-green hover:bg-fresh-green/90 text-white p-4 rounded-full shadow-lg transition-all transform hover:scale-110"
      >
        <MessageCircle className="h-6 w-6" />
      </Button>
    </div>
  );
}

--- client/src/components/ui/custom-cursor.tsx ---
// Custom cursor component removed - using CSS-only solution for better performance
export function CustomCursor() {
  return null;
}

--- client/src/lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

--- client/src/lib/queryClient.ts ---
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey[0] as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});

--- client/src/hooks/use-scroll-animation.tsx ---
import { useEffect, useRef, useState } from 'react';

export function useScrollAnimation() {
  const [isVisible, setIsVisible] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true);
        }
      },
      {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px',
      }
    );

    if (ref.current) {
      observer.observe(ref.current);
    }

    return () => {
      if (ref.current) {
        observer.unobserve(ref.current);
      }
    };
  }, []);

  return { ref, isVisible };
}

export function useScrollOpacity() {
  const [opacity, setOpacity] = useState(0);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleScroll = () => {
      if (!ref.current) return;

      const element = ref.current;
      const rect = element.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      
      // Calculate precise visibility percentage
      const elementTop = rect.top;
      const elementBottom = rect.bottom;
      const elementHeight = rect.height;
      
      let visibleHeight = 0;
      
      // Calculate visible portion more precisely
      if (elementBottom <= 0 || elementTop >= windowHeight) {
        // Element is completely outside viewport
        visibleHeight = 0;
      } else if (elementTop <= 0 && elementBottom >= windowHeight) {
        // Element is larger than viewport and spans entire screen
        visibleHeight = windowHeight;
      } else if (elementTop <= 0) {
        // Element starts above viewport but is partially visible from top
        visibleHeight = elementBottom;
      } else if (elementBottom >= windowHeight) {
        // Element starts in viewport but extends below
        visibleHeight = windowHeight - elementTop;
      } else {
        // Element is completely within viewport
        visibleHeight = elementHeight;
      }
      
      // Calculate exact visibility percentage (0% to 100%)
      const totalPossibleVisible = Math.min(elementHeight, windowHeight);
      let visibilityPercentage = totalPossibleVisible > 0 ? (visibleHeight / totalPossibleVisible) : 0;
      
      // Ensure percentage is between 0 and 1
      visibilityPercentage = Math.max(0, Math.min(1, visibilityPercentage));
      
      // Convert to opacity: 0% visible = 0 opacity, 1% visible = 0.01 opacity, 100% visible = 1 opacity
      const newOpacity = visibilityPercentage;
      
      setOpacity(newOpacity);
    };

    // Initial calculation
    handleScroll();

    // Add scroll listener
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('resize', handleScroll, { passive: true });

    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', handleScroll);
    };
  }, []);

  return { ref, opacity };
}

export function useScrollReveal() {
  useEffect(() => {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
        }
      });
    }, observerOptions);

    const elements = document.querySelectorAll('.scroll-reveal');
    elements.forEach(el => observer.observe(el));

    return () => {
      elements.forEach(el => observer.unobserve(el));
    };
  }, []);
}

==================================================
BACKEND SERVER FILES
==================================================

--- server/index.ts ---
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();

--- server/routes.ts ---
import type { Express } from "express";
import { createServer, type Server } from "http";
import { z } from "zod";

const newsletterSubscribeSchema = z.object({
  email: z.string().email("Invalid email address"),
});

export async function registerRoutes(app: Express): Promise<Server> {
  // Newsletter subscription endpoint
  app.post("/api/newsletter/subscribe", async (req, res) => {
    try {
      const { email } = newsletterSubscribeSchema.parse(req.body);
      
      // In a real implementation, you would:
      // 1. Store the email in your database
      // 2. Send a confirmation email
      // 3. Integrate with your email service provider (e.g., Mailchimp, SendGrid)
      
      console.log(`Newsletter subscription: ${email}`);
      
      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      res.json({ 
        success: true, 
        message: "Successfully subscribed to newsletter" 
      });
    } catch (error) {
      if (error instanceof z.ZodError) {
        res.status(400).json({ 
          success: false, 
          message: "Invalid email address" 
        });
      } else {
        res.status(500).json({ 
          success: false, 
          message: "Internal server error" 
        });
      }
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

--- server/storage.ts ---
import { users, type User, type InsertUser } from "@shared/schema";

// modify the interface with any CRUD methods
// you might need

export interface IStorage {
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  currentId: number;

  constructor() {
    this.users = new Map();
    this.currentId = 1;
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }
}

export const storage = new MemStorage();

--- server/vite.ts ---
import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(import.meta.dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}

--- shared/schema.ts ---
import { pgTable, text, serial, integer, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
});

export const insertUserSchema = createInsertSchema(users).pick({
  username: true,
  password: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

==================================================
DEPLOYMENT INSTRUCTIONS
==================================================

SETUP:
1. Run `npm install` to install all dependencies
2. Set up environment variables (DATABASE_URL if using database)

DEVELOPMENT:
1. Run `npm run dev` to start development server
2. Application runs on localhost:5000
3. Hot reload enabled for both frontend and backend

PRODUCTION BUILD:
1. Run `npm run build` to create production build
2. Run `npm start` to serve production application
3. Optimized builds with Vite and ESBuild

FEATURES INCLUDED:
✓ Complete responsive landing page
✓ Pre-launch testimonials with appropriate feedback
✓ "Free, why wouldn't you try?" messaging
✓ Sarah Chen profile with East Asian woman image
✓ Dynamic countdown timer
✓ Collapsible FAQ and pricing sections
✓ £200 coaching fee reference in founder story
✓ CareerFrame green (#88A98F) branding throughout
✓ Smooth animations and transitions
✓ Newsletter signup functionality
✓ Live chat integration placeholder
✓ SEO optimization with meta tags
✓ Custom cursor effects
✓ Express backend with API routes
✓ TypeScript throughout
✓ Tailwind CSS styling

This document contains every single line of code for your CareerFrame landing page. Copy and save this complete source code to take full control of your project.